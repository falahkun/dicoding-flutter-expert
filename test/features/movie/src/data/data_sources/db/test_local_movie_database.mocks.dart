// Mocks generated by Mockito 5.3.2 from annotations
// in ditonton/test/features/movie/src/data/data_sources/db/test_local_movie_database.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core/core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie/movie.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseHelper_0 extends _i1.SmartFake
    implements _i2.DatabaseHelper {
  _FakeDatabaseHelper_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalMovieDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalMovieDatabase extends _i1.Mock
    implements _i3.LocalMovieDatabase {
  MockLocalMovieDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get helper => (super.noSuchMethod(
        Invocation.getter(#helper),
        returnValue: _FakeDatabaseHelper_0(
          this,
          Invocation.getter(#helper),
        ),
      ) as _i2.DatabaseHelper);
  @override
  _i4.Future<_i3.MovieTable?> getItemById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getItemById,
          [id],
        ),
        returnValue: _i4.Future<_i3.MovieTable?>.value(),
      ) as _i4.Future<_i3.MovieTable?>);
  @override
  _i4.Future<List<_i3.MovieTable>> getItems() => (super.noSuchMethod(
        Invocation.method(
          #getItems,
          [],
        ),
        returnValue: _i4.Future<List<_i3.MovieTable>>.value(<_i3.MovieTable>[]),
      ) as _i4.Future<List<_i3.MovieTable>>);
  @override
  _i4.Future<int> insert(_i3.MovieTable? data) => (super.noSuchMethod(
        Invocation.method(
          #insert,
          [data],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
  @override
  _i4.Future<int> remove(_i3.MovieTable? data) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [data],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
